{"version":3,"sources":["components/Header.tsx","components/Aside.tsx","components/Layout.tsx","components/News.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TextWrapper","styled","p","Header","className","Menu","attached","Item","header","Aside","Container","div","NavWrapper","AsideWrapper","SideBarWrapper","ChildrenWrapper","Layout","children","NewsWrapper","ImageWrapper","ButtonWrapper","News","useState","newsData","setNewsData","loading","setloading","saveState","setSaveState","modalState","setModalState","modalMsg","setModalMsg","loadNewsArticle","a","undefined","fetch","res","status","json","news","SaveData","method","headers","body","JSON","stringify","style","padding","width","Button","disabled","primary","onClick","Divider","Loader","active","inline","src","imageURL","alt","heading","meta","article","color","Modal","size","open","onClose","Content","Actions","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8600226a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Menu } from \"semantic-ui-react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TextWrapper = styled.p`\r\n  @media (max-width: 768px) {\r\n    font-size: 0.85em;\r\n  }\r\n`;\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      <Menu attached=\"top\">\r\n        <Menu.Item header>\r\n          <TextWrapper>Bright Group</TextWrapper>\r\n        </Menu.Item>\r\n      </Menu>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nexport const Aside = () => {\r\n  return <div></div>;\r\n};\r\n","import React, { FC } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Header } from \"./Header\";\r\nimport { Aside } from \"./Aside\";\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  grid-template-areas:\r\n    \"nav-menu nav-menu nav-menu\"\r\n    \"sidebar children aside\";\r\n  max-height: 100vh;\r\n  width: 100%;\r\n  grid-template-columns: calc(1fr - 960px) 960px calc(1fr - 960px);\r\n  grid-template-rows: 45px calc(100vh - 45px);\r\n`;\r\n\r\nconst NavWrapper = styled.div`\r\n  grid-area: nav-menu;\r\n`;\r\n\r\nconst AsideWrapper = styled.div`\r\n  grid-area: aside;\r\n  min-height: 100%;\r\n  background: #efefef;\r\n  text-align: left;\r\n`;\r\n\r\nconst SideBarWrapper = styled.div`\r\n  grid-area: sidebar;\r\n  min-height: 100%;\r\n  background: #efefef;\r\n`;\r\n\r\nconst ChildrenWrapper = styled.div`\r\n  grid-area: children;\r\n  height: 100%;\r\n  width: 100%;\r\n  text-align: center;\r\n`;\r\n\r\nconst Layout: FC = ({ children }) => (\r\n  <Container>\r\n    <NavWrapper>\r\n      <Header />\r\n    </NavWrapper>\r\n    <AsideWrapper>\r\n      <Aside />\r\n    </AsideWrapper>\r\n    <SideBarWrapper></SideBarWrapper>\r\n    <ChildrenWrapper>{children}</ChildrenWrapper>\r\n  </Container>\r\n);\r\n\r\nexport default Layout;\r\n","import React, { useState } from \"react\";\r\nimport { Loader, Button, Divider, Modal } from \"semantic-ui-react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst NewsWrapper = styled.div`\r\n  width: 600px;\r\n  margin: auto;\r\n  @media (max-width: 768px) {\r\n    width: 200px;\r\n    margin: auto;\r\n    Button {\r\n      margin-top: 0.8em;\r\n    }\r\n  }\r\n`;\r\nconst ImageWrapper = styled.div`\r\n  @media (max-width: 768px) {\r\n    img {\r\n      width: 200px;\r\n    }\r\n  }\r\n`;\r\nconst TextWrapper = styled.div`\r\n  @media (max-width: 768px) {\r\n    h2 {\r\n      font-size: 1.2rem;\r\n    }\r\n  }\r\n`;\r\nconst ButtonWrapper = styled.div`\r\n  margin-top: 1em;\r\n`;\r\n\r\ntype newsType = {\r\n  heading: string;\r\n  meta: string;\r\n  imageURL: string;\r\n  article: string;\r\n};\r\n\r\nconst News = () => {\r\n  const [newsData, setNewsData] = useState<newsType>();\r\n  const [loading, setloading] = useState(false);\r\n  const [saveState, setSaveState] = useState(false);\r\n  const [modalState, setModalState] = useState(false);\r\n  const [modalMsg, setModalMsg] = useState(\"\");\r\n\r\n  const loadNewsArticle = async () => {\r\n    setloading(true);\r\n    setNewsData(undefined);\r\n    const res = await fetch(\"http://localhost:5500/news\");\r\n    if (res.status === 500) {\r\n      setModalMsg(\"Session timed out. Please try again.\");\r\n      setModalState(true);\r\n      setloading(false);\r\n    } else {\r\n      const news = await res.json();\r\n      setloading(false);\r\n      setNewsData(news);\r\n    }\r\n  };\r\n  const SaveData = async () => {\r\n    setSaveState(true);\r\n    const res = await fetch(\"http://localhost:5500/save\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify([newsData]),\r\n    });\r\n    if (res.status === 500) {\r\n      setModalMsg(\"Unsuccessful. Please try again\");\r\n      setModalState(true);\r\n      setSaveState(false);\r\n    } else {\r\n      setModalMsg(\"Aritcle saved!\");\r\n      setModalState(true);\r\n      setSaveState(false);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <div style={{ padding: \"1.5em\", width: \"inherit\" }}>\r\n        <Button disabled={loading} primary onClick={() => loadNewsArticle()}>\r\n          Scrap Latest News\r\n        </Button>\r\n        <Divider />\r\n      </div>\r\n      {loading && (\r\n        <Loader active inline=\"centered\">\r\n          Fetching data...\r\n        </Loader>\r\n      )}\r\n      {newsData && (\r\n        <>\r\n          <NewsWrapper>\r\n            <ImageWrapper>\r\n              <img\r\n                src={newsData.imageURL}\r\n                alt=\"news_article_image\"\r\n                width=\"500px\"\r\n              />\r\n            </ImageWrapper>\r\n            <TextWrapper>\r\n              <h2>{newsData.heading}</h2>\r\n              <p>{newsData.meta}</p>\r\n              <p>{newsData.article}</p>\r\n            </TextWrapper>\r\n            <ButtonWrapper>\r\n              <Button\r\n                disabled={saveState}\r\n                color=\"green\"\r\n                onClick={() => SaveData()}\r\n              >\r\n                Save\r\n              </Button>\r\n            </ButtonWrapper>\r\n          </NewsWrapper>\r\n        </>\r\n      )}\r\n      <Modal\r\n        size=\"small\"\r\n        open={modalState}\r\n        onClose={() => setModalState(false)}\r\n      >\r\n        <Modal.Content>\r\n          <p>{modalMsg}</p>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button\r\n            onClick={() => {\r\n              setModalState(false);\r\n              setModalMsg(\"\");\r\n            }}\r\n          >\r\n            OK\r\n          </Button>\r\n        </Modal.Actions>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default News;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Layout from \"./components/Layout\";\nimport News from \"./components/News\";\n\nconst App = () => {\n  return (\n    <Layout>\n      <News />\n    </Layout>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}